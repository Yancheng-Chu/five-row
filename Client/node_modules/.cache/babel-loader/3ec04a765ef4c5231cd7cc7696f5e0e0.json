{"remainingRequest":"H:\\Web\\Client\\node_modules\\babel-loader\\lib\\index.js!H:\\Web\\Client\\node_modules\\vue-loader-v16\\dist\\templateLoader.js??ref--6!H:\\Web\\Client\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!H:\\Web\\Client\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!H:\\Web\\Client\\src\\components\\online.vue?vue&type=template&id=5d461ee3","dependencies":[{"path":"H:\\Web\\Client\\src\\components\\online.vue","mtime":1695125746674},{"path":"H:\\Web\\Client\\babel.config.js","mtime":1678053611000},{"path":"H:\\Web\\Client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1677376279301},{"path":"H:\\Web\\Client\\node_modules\\babel-loader\\lib\\index.js","mtime":1677376279444},{"path":"H:\\Web\\Client\\node_modules\\vue-loader-v16\\dist\\templateLoader.js","mtime":1677376291311},{"path":"H:\\Web\\Client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1677376279301},{"path":"H:\\Web\\Client\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1677376291311}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgdG9EaXNwbGF5U3RyaW5nIGFzIF90b0Rpc3BsYXlTdHJpbmcsIGNyZWF0ZUVsZW1lbnRWTm9kZSBhcyBfY3JlYXRlRWxlbWVudFZOb2RlLCBGcmFnbWVudCBhcyBfRnJhZ21lbnQsIG9wZW5CbG9jayBhcyBfb3BlbkJsb2NrLCBjcmVhdGVFbGVtZW50QmxvY2sgYXMgX2NyZWF0ZUVsZW1lbnRCbG9jayB9IGZyb20gInZ1ZSI7CmNvbnN0IF9ob2lzdGVkXzEgPSB7CiAgc3R5bGU6IHsKICAgICJoZWlnaHQiOiAiMTAwdmgiLAogICAgIndpZHRoIjogIjEwMCUiLAogICAgInRleHQtYWxpZ24iOiAiY2VudGVyIgogIH0KfTsKY29uc3QgX2hvaXN0ZWRfMiA9IC8qI19fUFVSRV9fKi9fY3JlYXRlRWxlbWVudFZOb2RlKCJkaXYiLCB7CiAgY2xhc3M6ICJ0aXRsZSIKfSwgImZpdmUtdG8tYS1yb3ciLCAtMSAvKiBIT0lTVEVEICovKTsKY29uc3QgX2hvaXN0ZWRfMyA9IHsKICBzdHlsZTogewogICAgIm1hcmdpbi10b3AiOiAiMzBweCIKICB9Cn07CmNvbnN0IF9ob2lzdGVkXzQgPSB7CiAgc3R5bGU6IHsKICAgICJwb3NpdGlvbiI6ICJhYnNvbHV0ZSIsCiAgICAiZGlzcGxheSI6ICJpbmxpbmUtYmxvY2siCiAgfQp9Owpjb25zdCBfaG9pc3RlZF81ID0gWyJkaXNhYmxlZCJdOwpjb25zdCBfaG9pc3RlZF82ID0gWyJkaXNhYmxlZCJdOwpjb25zdCBfaG9pc3RlZF83ID0gLyojX19QVVJFX18qL19jcmVhdGVFbGVtZW50Vk5vZGUoImNhbnZhcyIsIHsKICBpZDogImJvYXJkIiwKICB3aWR0aDogIjYwMCIsCiAgaGVpZ2h0OiAiNjAwIgp9LCBudWxsLCAtMSAvKiBIT0lTVEVEICovKTsKCmV4cG9ydCBmdW5jdGlvbiByZW5kZXIoX2N0eCwgX2NhY2hlLCAkcHJvcHMsICRzZXR1cCwgJGRhdGEsICRvcHRpb25zKSB7CiAgcmV0dXJuIF9vcGVuQmxvY2soKSwgX2NyZWF0ZUVsZW1lbnRCbG9jayhfRnJhZ21lbnQsIG51bGwsIFtfY3JlYXRlRWxlbWVudFZOb2RlKCJkaXYiLCBudWxsLCBfdG9EaXNwbGF5U3RyaW5nKCRkYXRhLm1zZyksIDEgLyogVEVYVCAqLyksIF9jcmVhdGVFbGVtZW50Vk5vZGUoImRpdiIsIG51bGwsIF90b0Rpc3BsYXlTdHJpbmcoJGRhdGEubXNnMiksIDEgLyogVEVYVCAqLyksIF9jcmVhdGVFbGVtZW50Vk5vZGUoImRpdiIsIG51bGwsIF90b0Rpc3BsYXlTdHJpbmcoJGRhdGEubXNnMyksIDEgLyogVEVYVCAqLyksIF9jcmVhdGVFbGVtZW50Vk5vZGUoImRpdiIsIF9ob2lzdGVkXzEsIFtfaG9pc3RlZF8yLCBfY3JlYXRlRWxlbWVudFZOb2RlKCJkaXYiLCBfaG9pc3RlZF8zLCBfdG9EaXNwbGF5U3RyaW5nKCRkYXRhLnRpcCksIDEgLyogVEVYVCAqLyksIF9jcmVhdGVFbGVtZW50Vk5vZGUoImRpdiIsIF9ob2lzdGVkXzQsIFtfY3JlYXRlRWxlbWVudFZOb2RlKCJidXR0b24iLCB7CiAgICBvbkNsaWNrOiBfY2FjaGVbMF0gfHwgKF9jYWNoZVswXSA9ICguLi5hcmdzKSA9PiAkb3B0aW9ucy5yZXN0b3JlICYmICRvcHRpb25zLnJlc3RvcmUoLi4uYXJncykpCiAgfSwgIlJlc3RvcmUiKSwgX2NyZWF0ZUVsZW1lbnRWTm9kZSgiYnV0dG9uIiwgewogICAgZGlzYWJsZWQ6ICRkYXRhLmVudGVyLAogICAgc3R5bGU6IHsKICAgICAgIm1hcmdpbi1sZWZ0IjogIjQwOHB4IgogICAgfSwKICAgIG9uQ2xpY2s6IF9jYWNoZVsxXSB8fCAoX2NhY2hlWzFdID0gJGV2ZW50ID0+ICRvcHRpb25zLmNoZXNzKDEpKQogIH0sICJCbGFjayIsIDggLyogUFJPUFMgKi8sIF9ob2lzdGVkXzUpLCBfY3JlYXRlRWxlbWVudFZOb2RlKCJidXR0b24iLCB7CiAgICBkaXNhYmxlZDogJGRhdGEuZW50ZXIsCiAgICBzdHlsZTogewogICAgICAibWFyZ2luLWxlZnQiOiAiMTBweCIKICAgIH0sCiAgICBvbkNsaWNrOiBfY2FjaGVbMl0gfHwgKF9jYWNoZVsyXSA9ICRldmVudCA9PiAkb3B0aW9ucy5jaGVzcygyKSkKICB9LCAiV2hpdGUiLCA4IC8qIFBST1BTICovLCBfaG9pc3RlZF82KV0pLCBfaG9pc3RlZF83XSldLCA2NCAvKiBTVEFCTEVfRlJBR01FTlQgKi8pOwp9"},{"version":3,"names":["style","_createElementVNode","class","id","width","height","_toDisplayString","$data","msg","msg2","msg3","_hoisted_1","_hoisted_2","_hoisted_3","tip","_hoisted_4","onClick","_cache","args","$options","restore","disabled","enter","$event","chess","_hoisted_5","_hoisted_6","_hoisted_7"],"sources":["H:\\Web\\Client\\src\\components\\online.vue"],"sourcesContent":["<template>\n  <div>{{ msg }}</div>\n  <div>{{ msg2 }}</div>\n  <div>{{ msg3 }}</div>\n  <div style=\"height: 100vh; width: 100%; text-align: center\">\n    <div class=\"title\">five-to-a-row</div>\n\n    <div style=\"margin-top: 30px\">{{ tip }}</div>\n    <div style=\"position: absolute; display: inline-block\">\n      <button v-on:click=\"restore\">Restore</button>\n      <button :disabled=\"enter\" style=\"margin-left: 408px\" v-on:click=\"chess(1)\">Black</button>\n      <button :disabled=\"enter\" style=\"margin-left: 10px\" v-on:click=\"chess(2)\">White</button>\n    </div>\n\n    <canvas id=\"board\" width=\"600\" height=\"600\"></canvas>\n  </div>\n</template>\n       \n<script>\nimport axios from \"axios\";\nimport Cookies from \"js-cookie\";\nexport default {\n  name: \"five-to-a-row\",\n  data() {\n    return {\n      enter: true,\n      cookie: '',\n      ctx: null,\n      chessBoard: [],\n      player: true,\n      over: true,\n      lastX: null,\n      lastY: null,\n      wins: [],\n      blackWin: [],\n      whiteWin: [],\n      count: 0,\n      tip: \"\",\n      id: null,\n      msg: \"Please Choose Color\",\n      chosen: false,\n      turn: false,\n      msg2: '',\n      room: null,\n      msg3: '',\n      token: [],\n      total: false,\n      color: ''\n    };\n  },\n  sockets: {\n    newM(data) {\n      this.msg2 = data.msg;\n      this.enter = false\n\n    },\n\n    res() {\n\n      this.enter = false\n      this.restore()\n    },\n    message(data) {\n      this.msg2 = data[1]\n      this.chosen = true\n\n    },\n    updated(data) {\n      if (data) {\n\n        this.token = data\n\n\n\n      }\n\n    },\n    drawU(data) {\n      this.player = data.player;\n      this.chessBoard = data.board;\n      this.blackWin = data.black;\n      this.whiteWin = data.white;\n      this.lastX = data.lastX;\n      this.lastY = data.lastY;\n      this.over = data.over;\n      this.drawChess(data.lastX, data.lastY, data.player);\n      if (data.over) {\n        this.tip = data.results;\n\n      } else {\n        this.tip = data.player ? \"White Turn\" : \"Black Turn\";\n      }\n\n    },\n\n  },\n  mounted() {\n\n\n    this.cookie = JSON.parse(Cookies.get('token'))\n\n\n    this.id = Cookies.get('id')\n\n    this.room = this.cookie.rooms\n\n\n    let container = document.getElementById(\"board\");\n    container.addEventListener(\"click\", this.handleClick);\n    this.ctx = container.getContext(\"2d\");\n    this.drawChessBoard();\n\n    for (let i = 0; i < 15; i++) {\n      this.chessBoard[i] = [];\n      this.wins[i] = [];\n      for (let j = 0; j < 15; j++) {\n        this.chessBoard[i][j] = 0;\n        this.wins[i][j] = [];\n      }\n    }\n    this.horizon();\n    this.vertical();\n    this.slash();\n    this.reverse();\n    this.init();\n\n    if (Cookies.get('room') == this.$route.params.room) {\n\n\n      this.room = this.$route.params.room\n      axios\n        .post(\"http://localhost:1919/chess/room\", {\n          rooms: this.cookie.rooms,\n        })\n        .then((res) => {\n\n          if (res.status == 200) {\n            this.id = res.data._id;\n            if (res.data.board.length != 0) {\n              this.lastX = res.data.lastX;\n              this.lastY = res.data.lastY;\n              this.board = res.data.board;\n              this.chessBoard = res.data.board;\n              this.blackWin = res.data.black;\n              this.whiteWin = res.data.white;\n              this.player = res.data.player;\n              this.over = res.data.over;\n              this.tip = res.data.results;\n              this.token = res.data.token;\n              this.total = res.data.total;\n              this.chosen = res.data.chosen;\n\n              if (this.tip == 'Black Win!' || this.tip == 'White Win!') {\n                this.over = false\n                for (let i = 0; i < 15; i++) {\n                  for (let j = 0; j < 15; j++) {\n                    if (this.board[i][j] == 1) {\n                      this.player = true;\n                      this.drawChess(i, j, this.player);\n                    } else if (this.board[i][j] == 2) {\n                      this.player = false;\n                      this.drawChess(i, j, this.player);\n                    }\n                  }\n                }\n                this.over = true\n              } else {\n\n                for (let i = 0; i < 15; i++) {\n                  for (let j = 0; j < 15; j++) {\n                    if (this.board[i][j] == 1) {\n                      this.player = true;\n                      this.drawChess(i, j, this.player);\n                    } else if (this.board[i][j] == 2) {\n                      this.player = false;\n                      this.drawChess(i, j, this.player);\n                    }\n                  }\n                }\n              }\n\n              this.player = res.data.player;\n            }\n\n            if (res.data.users.length == 2) {\n              this.enter = false\n            }\n            this.total = res.data.total;\n            this.chosen = res.data.chosen;\n\n            this.tip = res.data.results;\n\n            for (let i of res.data.token) {\n\n              if (i.id == this.cookie.id && i.cheese != '') {\n\n                this.total = true\n                this.color = i.cheese\n                this.msg = 'You are ' + this.color\n                if (this.tip == 'Black Turn' && this.color == 'Black') {\n                  this.player = true\n                  this.over = false\n                } else if (this.tip == 'White Turn' && this.color == 'White') {\n                  this.player = false\n                  this.over = false\n                }\n                else {\n                  this.over = true\n                }\n                return\n              } else {\n                this.chosen = false\n                this.total = false\n                this.msg = \"Please Choose Color\"\n              }\n              // if (i.id != this.coookie.id && i.cheese != '') {\n              //   this.msg2 = 'Your opponent chose ' + i.cheese\n              // }\n            }\n\n          }\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  },\n  watch: {\n    msg2(to, from) {\n      if (to != from) {\n        this.enter = false\n      }\n    },\n    over() {\n      // if (this.over) {\n      //   if (!this.player) {\n      //     this.tip = \"White Win!\";\n      //     window.alert(\"White Win!\");\n      //   } else {\n      //     this.tip = \"Black Win!\";\n      //     window.alert(\"Black Win!\");\n      //   }\n      //   // this.tip = !this.player ?  \"White Turn\" : \"Black Turn\";\n      // }\n    },\n    $route(to) {\n      if (to.params.room != this.cookie.rooms) {\n        window.alert(\"You Are Not Allowed\");\n        this.$router.push({\n          name: \"online\",\n          params: { room: this.cookie.rooms },\n        });\n      }\n    },\n  },\n  computed: {},\n  methods: {\n    chess(e) {\n      if (!this.total) {\n        if (!this.chosen) {\n          if (e == 1) {\n            this.chosen = true;\n            this.msg = \"You are Black\";\n            this.over = false;\n            let m = 'Your opponent chose Black'\n\n            this.cookie.cheese = 'Black'\n\n            this.token.push(this.cookie)\n\n            Cookies.set('token', JSON.stringify(this.cookie))\n            this.$socket.emit('sendMessage', this.room, m)\n          } else {\n            this.chosen = true;\n            this.msg = \"You are White\";\n            let m = 'Your opponent chose White'\n\n            this.cookie.cheese = 'White'\n            Cookies.set('token', JSON.stringify(this.cookie))\n            this.token.push(this.cookie)\n            this.$socket.emit('sendMessage', this.room, m)\n          }\n          this.$socket.emit('chosen', this.id, this.chosen)\n        }\n        if (this.chosen) {\n          if (this.msg2 == 'Your opponent chose Black') {\n            if (e == 2) {\n              this.msg = \"You are White\";\n              let m = 'Your opponent chose White'\n\n              this.cookie.cheese = 'White'\n              Cookies.set('token', JSON.stringify(this.cookie))\n              this.token.push(this.cookie)\n              this.$socket.emit('sendMessage', this.room, m)\n            } else {\n              this.msg = ('You can only choose White')\n            }\n          } else if (this.msg2 == 'Your opponent chose White') {\n            if (e == 1) {\n              this.msg = \"You are Black\";\n              let m = 'Your opponent chose Black'\n              this.over = false;\n\n              this.cookie.cheese = 'White'\n              Cookies.set('token', JSON.stringify(this.cookie))\n              this.token.push(this.cookie)\n              this.$socket.emit('sendMessage', this.room, m)\n            } else {\n              this.msg = ('You can only choose Black')\n            }\n          }\n        }\n\n\n        let t = []\n\n        for (let i of this.token) {\n          t.push(i)\n        }\n\n\n        let req = {\n          _id: this.id,\n          board: this.board,\n          player: this.player,\n          black: this.black,\n          white: this.white,\n          lastX: this.lastX,\n          lastY: this.lastY,\n          over: this.over,\n          results: this.tip,\n          token: t\n        };\n\n        this.$socket.emit('updateData', req._id, req.token)\n      } else {\n        this.msg = 'You are already Chosen ' + this.color\n        this.$socket.emit('total', this.id, this.total)\n      }\n    },\n    horizon() {\n      for (var i = 0; i < 15; i++) {\n        for (var j = 0; j < 11; j++) {\n          for (var k = 0; k < 5; k++) {\n            this.wins[i][j + k][this.count] = true;\n          }\n          this.count++;\n        }\n      }\n    },\n    vertical() {\n\n      for (var i = 0; i < 15; i++) {\n        for (var j = 0; j < 11; j++) {\n          for (var k = 0; k < 5; k++) {\n            this.wins[j + k][i][this.count] = true;\n          }\n          this.count++;\n        }\n      }\n    },\n    slash() {\n\n      for (var i = 0; i < 11; i++) {\n        for (var j = 0; j < 11; j++) {\n          for (var k = 0; k < 5; k++) {\n            this.wins[i + k][j + k][this.count] = true;\n          }\n          this.count++;\n        }\n      }\n    },\n    reverse() {\n\n      for (var i = 0; i < 11; i++) {\n        for (var j = 14; j > 3; j--) {\n          for (var k = 0; k < 5; k++) {\n            this.wins[i + k][j - k][this.count] = true;\n          }\n          this.count++;\n        }\n      }\n    },\n    init() {\n      for (var i = 0; i < this.count; i++) {\n        this.blackWin[i] = 0;\n        this.whiteWin[i] = 0;\n      }\n    },\n    drawChessBoard() {\n      for (var i = 0; i < 15; i++) {\n        this.ctx.moveTo(20 + i * 40, 20);\n        this.ctx.lineTo(20 + i * 40, 580);\n        this.ctx.stroke();\n        this.ctx.moveTo(20, 20 + i * 40);\n        this.ctx.lineTo(580, 20 + i * 40);\n        this.ctx.stroke();\n      }\n    },\n    drawChess(x, y, player) {\n      this.ctx.beginPath();\n      this.ctx.arc(20 + x * 40, 20 + y * 40, 15, 0, 2 * Math.PI);\n      this.ctx.closePath();\n      var grd = this.ctx.createRadialGradient(\n        25 + x * 40,\n        15 + y * 40,\n        15,\n        20 + x * 40,\n        20 + y * 40,\n        35\n      );\n      if (!this.over) {\n        if (player) {\n          grd.addColorStop(0, \"#000000\");\n          grd.addColorStop(1, \"#ffffff\");\n        } else {\n          grd.addColorStop(0, \"#ffffff\");\n          grd.addColorStop(1, \"#000000\");\n        }\n        this.player = !this.player;\n        this.ctx.fillStyle = grd;\n        this.ctx.fill();\n      }\n\n    },\n\n    handleClick(event) {\n      if (this.over) {\n        return;\n      } else {\n        var x = Math.floor(event.offsetX / 40);\n        var y = Math.floor(event.offsetY / 40);\n\n        let req = {\n          _id: this.id,\n          board: {},\n          player: true,\n          black: {},\n          white: {},\n          lastX: x,\n          lastY: y,\n          over: false,\n          results: \"\",\n        };\n\n        if (this.chessBoard[x][y] == 0) {\n          this.drawChess(x, y, this.player);\n\n          if (this.player) {\n            this.chessBoard[x][y] = 2;\n            for (let k = 0; k < this.count; k++) {\n              if (this.wins[x][y][k]) {\n                this.whiteWin[k]++;\n\n              }\n            }\n          } else {\n            this.chessBoard[x][y] = 1;\n            for (let k = 0; k < this.count; k++) {\n              if (this.wins[x][y][k]) {\n                this.blackWin[k]++;\n\n              }\n            }\n          }\n\n          for (let k = 0; k < this.count; k++) {\n            if (this.blackWin[k] == 5) {\n              this.over = true;\n              req.over = true;\n              req.results = \"Black Win!\";\n              this.tip = \"Black Win!\";\n              this.$socket.emit(\"uuu\", this.id, req);\n\n            }\n\n            if (this.whiteWin[k] == 5) {\n              this.over = true;\n              req.over = true;\n              req.results = \"White Win!\";\n              this.tip = \"White Win!\";\n              this.$socket.emit(\"uuu\", this.id, req);\n\n            }\n          }\n\n          let draw = {\n            lastX: x,\n            lastY: y,\n            player: !this.player,\n            results: this.player ? \"White Turn\" : \"Black Turn\",\n            board: this.chessBoard,\n            white: this.whiteWin,\n            black: this.blackWin,\n            over: this.over,\n\n          };\n          if (this.over) {\n            draw.results = this.tip;\n          }\n          this.$socket.emit(\"draw\", draw);\n\n          if (this.over) {\n            req.results = this.tip;\n            req.black = this.blackWin;\n            req.white = this.whiteWin;\n            req.board = this.chessBoard;\n            req.player = !this.player;\n            req.over = this.over;\n          } else {\n            req.black = this.blackWin;\n            req.white = this.whiteWin;\n            req.board = this.chessBoard;\n            req.player = !this.player;\n            req.results = !this.player ? \"White Turn\" : \"Black Turn\";\n            req.over = this.over;\n          }\n\n          this.tip = req.results;\n\n\n\n          this.$socket.emit(\"uuu\", req._id, req.board, req.player, req.black, req.white, req.lastX, req.lastY,\n            req.over, req.results);\n\n          this.over = true\n        }\n      }\n    },\n    restore() {\n      if (this.lastX != null || this.lastY != null) {\n        this.ctx.clearRect(0, 0, 600, 600);\n        this.ctx.beginPath();\n        this.ctx.arc(0, 0, 0, 0, 0);\n        this.ctx.fill();\n\n        for (let i = 0; i < 15; i++) {\n          this.chessBoard[i] = [];\n          for (let j = 0; j < 15; j++) {\n            this.chessBoard[i][j] = 0;\n          }\n        }\n        for (let i = 0; i < this.count; i++) {\n          this.blackWin[i] = 0;\n          this.whiteWin[i] = 0;\n        }\n\n        this.drawChessBoard();\n        this.over = true;\n        this.player = true;\n        this.chosen = false;\n        this.total = false;\n\n        this.msg = 'Please Choose Color'\n\n        axios\n          .post(\"http://localhost:1919/chess/upload\", {\n            _id: this.id,\n            over: this.over,\n            player: this.player,\n            board: this.chessBoard,\n            black: this.blackWin,\n            white: this.whiteWin,\n            results: \"Black Turn\",\n            total: this.total,\n            chosen: this.chosen\n          })\n          .then((res) => {\n            if (res.status == 200) {\n              this.tip = \"Black Turn\";\n              this.lastX = null;\n              this.lastY = null;\n              this.cookie.cheese = ''\n              Cookies.set('token', JSON.stringify(this.cookie))\n              let restore = true;\n              this.$socket.emit(\"restores\", restore);\n              this.enter = false\n            }\n          })\n          .catch((err) => {\n            console.log(err);\n          });\n      }\n\n      this.cookie.cheese = ''\n\n      let c = []\n      c.push(this.cookie)\n      this.token = c\n\n\n      axios\n        .post(\"http://localhost:1919/chess/upload\", {\n          _id: this.id,\n          over: true,\n          player: true,\n          results: \"Black Turn\",\n          total: false,\n          chosen: false,\n          token: this.token\n        })\n        .then((res) => {\n\n          if (res.status == 200) {\n            this.tip = \"Black Turn\";\n            this.msg = \"Please Choose Color\"\n            this.lastX = null;\n            this.lastY = null;\n\n            Cookies.set('token', JSON.stringify(this.cookie))\n\n          }\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n\n    },\n  },\n};\n</script>\n       \n<style>\ncanvas {\n  margin-top: 30px;\n  box-shadow: -2px -2px 2px #f0f0f0, 5px 5px 5px #9d9d9d;\n}\n\n.title {\n  font-size: 32px;\n  font-weight: 800;\n}\n</style>"],"mappings":";;EAIOA,KAAsD,EAAtD;IAAA;IAAA;IAAA;EAAA;AAAsD;gCACzDC,mBAAA,CAAsC;EAAjCC,KAAK,EAAC;AAAO,GAAC,eAAa;;EAE3BF,KAAwB,EAAxB;IAAA;EAAA;AAAwB;;EACxBA,KAAiD,EAAjD;IAAA;IAAA;EAAA;AAAiD;;;gCAMtDC,mBAAA,CAAqD;EAA7CE,EAAE,EAAC,OAAO;EAACC,KAAK,EAAC,KAAK;EAACC,MAAM,EAAC;;;;6DAbxCJ,mBAAA,CAAoB,aAAAK,gBAAA,CAAZC,KAAA,CAAAC,GAAG,kBACXP,mBAAA,CAAqB,aAAAK,gBAAA,CAAbC,KAAA,CAAAE,IAAI,kBACZR,mBAAA,CAAqB,aAAAK,gBAAA,CAAbC,KAAA,CAAAG,IAAI,kBACZT,mBAAA,CAWM,OAXNU,UAWM,GAVJC,UAAsC,EAEtCX,mBAAA,CAA6C,OAA7CY,UAA6C,EAAAP,gBAAA,CAAZC,KAAA,CAAAO,GAAG,kBACpCb,mBAAA,CAIM,OAJNc,UAIM,GAHJd,mBAAA,CAA6C;IAAhCe,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,OAAA,IAAAD,QAAA,CAAAC,OAAA,IAAAF,IAAA,CAAO;KAAE,SAAO,GACpCjB,mBAAA,CAAyF;IAAhFoB,QAAQ,EAAEd,KAAA,CAAAe,KAAK;IAAEtB,KAA0B,EAA1B;MAAA;IAAA,CAA0B;IAAMgB,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAM,MAAA,IAAEJ,QAAA,CAAAK,KAAK;KAAK,OAAK,iBAAAC,UAAA,GAChFxB,mBAAA,CAAwF;IAA/EoB,QAAQ,EAAEd,KAAA,CAAAe,KAAK;IAAEtB,KAAyB,EAAzB;MAAA;IAAA,CAAyB;IAAMgB,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAM,MAAA,IAAEJ,QAAA,CAAAK,KAAK;KAAK,OAAK,iBAAAE,UAAA,E,GAGjFC,UAAqD,C"}]}